# Определение перспективного тарифа для телеком-компании
Имеются данные компании «Мегалайн» — федерального оператора сотовой связи. Клиентам предлагают два тарифных плана: «Смарт» и «Ультра». Чтобы скорректировать рекламный бюджет, коммерческий департамент хочет понять, какой тариф приносит больше денег.  Предстоит сделать предварительный анализ тарифов на небольшой выборке клиентов.  
В нашем распоряжении данные 500 пользователей «Мегалайна»: кто они, откуда, каким тарифом пользуются, сколько звонков и сообщений каждый отправил за 2018 год. Нужно проанализировать поведение клиентов и сделать вывод — какой тариф лучше.

**Описание тарифов:**  

*Тариф «Смарт»*  
Ежемесячная плата: 550 рублей  
Включено 500 минут разговора, 50 сообщений и 15 Гб интернет-трафика  
Стоимость услуг сверх тарифного пакета: 1. минута разговора: 3 рубля («Мегалайн» всегда округляет вверх значения минут и мегабайтов. Если пользователь проговорил всего 1 секунду, в тарифе засчитывается целая минута); 2. сообщение: 3 рубля; 3. 1 Гб интернет-трафика: 200 рублей.  

*Тариф «Ультра»*  
Ежемесячная плата: 1950 рублей  
Включено 3000 минут разговора, 1000 сообщений и 30 Гб интернет-трафика  
Стоимость услуг сверх тарифного пакета: 1. минута разговора: 1 рубль; 2. сообщение: 1 рубль; 3. 1 Гб интернет-трафика: 150 рублей.  

**Примечание:**
«Мегалайн» всегда округляет секунды до минут, а мегабайты — до гигабайт. Каждый звонок округляется отдельно: даже если он длился всего 1 секунду, будет засчитан как 1 минута.  

Для веб-трафика отдельные сессии не считаются. Вместо этого общая сумма за месяц округляется в бо́льшую сторону. Если абонент использует 1025 мегабайт в этом месяце, с него возьмут плату за 2 гигабайта.

**Содержание**
1. [Изучение данных из файла](#start)
2. [Предобработка данных](#preprocessing)
3. [Анализ данных и проведение расчетов](#analytics)
4. [Проверка гипотез](#check)
5. [Общий вывод](#conclusion)

## Изучение данных из файла 
<a id="start"></a>

#загружаем нужные бибилиотеки
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
import seaborn as sns
import datetime as dt
from scipy import stats as st

calls = pd.read_csv('/datasets/calls.csv')
internet = pd.read_csv('/datasets/internet.csv')
messages = pd.read_csv('/datasets/messages.csv')
tariffs = pd.read_csv('/datasets/tariffs.csv')
users = pd.read_csv('/datasets/users.csv')

calls.info()

calls.head(15)

calls.describe()

Таблица `Calls` содержит информацию о звонках: всего 202607 значений, пропущенных нет.

internet.info()

internet.head(15)

internet.describe()

Таблица `internet` содержит информацию об интернет-сессиях: всего 149396 значений, пропущенных нет.

messages.info()

messages.head(15)

Таблица `messages` содержит информацию о сообщениях: всего 123036 значений, пропущенных нет.

tariffs.info()

tariffs.head(15)

Таблица `tariffs` содержит информацию о тарифах: всего 2 значения, пропущенных нет.

users.info()

users.head(15)

users.describe()

Таблица `users` содержит информацию о пользователях: всего 500 значений, пропущенные - есть в столбце `churn_date`(дата прекращения пользования тарифом) Это значит, что тариф ещё действовал на момент выгрузки данных.

**Вывод:**  
Предоставленные данные не содержат пропущенных значений, за исключением столбца `churn_date` в таблице `users`, что является хорошей новостью для компании, т.к. означает,что большинство пользователей продолжают пользоваться их тарифами.  
Во всех таблицах, где есть информация о дате, ее необходимо перевести в формат `date_time`.  

### Обработка данных в таблице users

#Приведем данные в столбцах с датой в корректный формат
users['reg_date'] = pd.to_datetime(users['reg_date'], format='%Y.%m.%d')
users['churn_date'] = pd.to_datetime(users['churn_date'], format='%Y.%m.%d')

#Сразу создадим столбец, где приведем дату в месяц(необходим для дальнейших расчетов):
users['month'] = users['reg_date'].dt.month

#Проверим на дубликаты
users.duplicated().sum()

### Обработка данных в таблице calls

#Приведем данные в столбцах с датой в корректный формат
calls['call_date'] = pd.to_datetime(calls['call_date'], format='%Y.%m.%d')

#Сразу создадим столбец, где приведем дату в месяц(необходим для дальнейших расчетов):
calls['month'] = calls['call_date'].dt.month

#Проверим на дубликаты
calls.duplicated().sum()

#Округлим значения продолжительности звонков вверх
calls.duration = calls.duration.apply(np.ceil).astype('int')

### Обработка данных в таблице messages

#Приведем данные в столбцах с датой в корректный формат
messages['message_date'] = pd.to_datetime(messages['message_date'], format='%Y.%m.%d')

#Сразу создадим столбец, где приведем дату в месяц(необходим для дальнейших расчетов):
messages['month'] = messages['message_date'].dt.month

#Проверим на дубликаты
messages.duplicated().sum()

### Обработка данных в таблице  internet

#Приведем данные в столбцах с датой в корректный формат
internet['session_date'] = pd.to_datetime(internet['session_date'], format='%Y.%m.%d')

#Сразу создадим столбец, где приведем дату в месяц(необходим для дальнейших расчетов):
internet['month'] = internet['session_date'].dt.month

#Проверим на дубликаты
internet.duplicated().sum()

**Посчитаем количество сделанных звонков и израсходованных минут разговора по месяцам для каждого пользователя**

calls.head()

#Создадим сводную таблицу 
users_calls = calls.pivot_table(index=['user_id', 'month'], values='duration', aggfunc={'count', 'sum'})

#Переименуем колонки для удобства
users_calls.columns = ['duration_count', 'duration_sum']

users_calls.head(10)

users_calls.info()

**Посчитаем количество отправленных сообщений по месяцам**

messages.head()

#Создадим сводную таблицу 
users_messages = messages.pivot_table(index=['user_id', 'month'], values='id', aggfunc='count')

#Переименуем колонку для удобства
users_messages.columns = ['messages']

users_messages.head(10)

users_messages.info()

**Посчитаем для каждого пользователя по месяцам объем израсходованного интернет-трафика**

internet.head()

#Создадим сводную таблицу 
users_internet = internet.pivot_table(index=['user_id', 'month'], values='mb_used', aggfunc='sum')

#перевожу в гб
users_internet['mb_used'] = users_internet['mb_used']/1024

#округлю до большего значения
users_internet['mb_used'] = users_internet['mb_used'].apply(np.ceil).astype('int')

#Переименую столбец
users_internet.rename(columns={'mb_used':'gb_used'}, inplace ='True')

users_internet.head(10)

users_internet.info()

<div class="alert alert-info"> 
    Так как я перевела значения в гигабайты, то и в таблице с тарифами надо заменить значения мегабайт на гигабайты<div>


tariffs.head()

#Перевожу в гб
tariffs['mb_per_month_included'] = tariffs['mb_per_month_included']/1024
#Меняю название колонки
tariffs.rename(columns={'mb_per_month_included': 'gb_per_month_included'}, inplace=True)

tariffs.head()

**Посчитаем помесячную выручку с каждого пользователя**

*Объединим все сводные таблицы в одну, предварительно сбросив индексы*

users_calls.reset_index(inplace=True)
users_internet.reset_index(inplace=True)
users_messages.reset_index(inplace=True)

grouped_data = users_calls.merge(users_messages, how='outer', on=['user_id', 'month'])

grouped_data

grouped_data = grouped_data.merge(users_internet, how='outer', on=['user_id', 'month'])

grouped_data

В ходе объединения таблиц, в некоторых колонках появились отсутствующие значения, т.к. пользователь,например, не пользовался интернетом, не писал смс и т.д. Заменим их на ноль.

grouped_data = grouped_data.fillna(0)

grouped_data

#Объединим данные о пользователях с информацией о тарифах.
users_new = users.drop(['age', 'churn_date', 'first_name', 'last_name', 'reg_date', 'month'], axis = 1)
users_new.head()

data = grouped_data.merge(users_new, on='user_id', how='left')

data

#Выведем исходную таблицу с тарифами
tariffs

#Так как названия колонок с тарифом отличны, переименуем столбец
tariffs.rename(columns={'tariff_name': 'tariff'}, inplace=True)

all_data = data.merge(tariffs,how='left', on='tariff')

all_data.head(5)

len(all_data['user_id'].unique())

Для расчете помесячной выручки необходимо:
 - вычесть бесплатный лимит из суммарного количества звонков, сообщений и интернет-трафика;
 - остаток умножить на значение из тарифного плана; 
 - прибавить абонентскую плату, соответствующую тарифному плану.

# Стоимость потраченных минут
all_data['cost_calls'] = (all_data['duration_sum'] - all_data['minutes_included'])*all_data['rub_per_minute']
all_data.head()

# Стоимость потраченных сообщений
all_data['cost_msg'] = (all_data['messages'] - all_data['messages_included'])*all_data['rub_per_message']
all_data.head()

# Стоимость потраченных мегабайт
all_data['cost_gb'] = (all_data['gb_used'] - all_data['gb_per_month_included'])  * all_data['rub_per_gb']
all_data.head()

Полученные отрицательные значения означают, что клиент не воспользовался услугой и следовательно не понес дополнительных расходов, поэтому заменим данные значения на ноль.

num_to_null = all_data._get_numeric_data()
num_to_null[num_to_null < 0] = 0
all_data.head()

<div class="alert alert-success">
<font size="5"<b>Комментарий ревьюера</b> </font>
    
**Успех**

Молодец, что не упустила этот момент
    
</div>

# Рассчитаем столбец "выручка"
all_data['revenue'] = (all_data['cost_calls'] + all_data['cost_msg'] + all_data['cost_gb'] + all_data['rub_monthly_fee'])
all_data.tail(30)  

#Отфоматируем итоговую таблицу
all_data.columns
cols = ['user_id', 'month', 'duration_count', 'duration_sum', 'messages',
       'gb_used', 'city', 'tariff', 'cost_calls', 'cost_msg', 'cost_gb', 'revenue']
all_data = all_data[cols]  
all_data.head()

all_data[['duration_count','duration_sum','messages','gb_used','cost_calls','cost_msg','cost_gb','revenue']] = all_data[['duration_count','duration_sum','messages','gb_used','cost_calls','cost_msg','cost_gb','revenue']].astype('int')

all_data.info()

**Вывод:**  
Рассчитана помесячная выручка для каждого пользователя. В результате объединения данных из таблиц часть значений выручки получилась отрицательная, значит клиент использовал минуты, смс и траффик внутри своего тарифного пакета. Подобные значения для удобства были заменены на нулевые значения.

## Анализ данных и проведение расчетов
<a id="analytics"></a>

### Сколько минут разговора, сколько сообщений и какой объём интернет-трафика требуется пользователям каждого тарифа в месяц? 

all_data_grouped = all_data.pivot_table(
    index=['tariff', 'month'],
    values=['duration_sum', 'messages', 'gb_used'],
    aggfunc={'duration_sum': 'sum',
             'messages': 'sum', 'gb_used': 'sum'}
)

all_data_grouped

Количество оказанных услуг возрастает с каждым месяцем. Пользователи тарифа "Смарт" более активно используют услуги, что связано с более дешевыми тарифами.

### Посчитаем среднее, дисперсию и стандартное отклонение по месяцам для каждого тарифа

users_info_var = all_data.pivot_table(
    index=['tariff'],
    values=['duration_sum', 'messages', 'gb_used'],
    aggfunc= (np.var)
)

users_info_var

pd.options.display.float_format = '{:,.2f}'.format

users_info_var

# составим сводную таблицу для расчета стандартного отклонения
users_info_std = all_data.pivot_table(
    index=['tariff'],
    values=['duration_sum', 'messages', 'gb_used'],
    aggfunc= np.std
)
# переименуем столбцы
users_info_std.columns = ['duration_std', 'gb_used_std', 'message_std']
users_info_std  # проверка

# составим сводную таблицу для расчета среднего
users_info_mean = all_data.pivot_table(
    index=['tariff'],
    values=['duration_sum', 'messages', 'gb_used'],
    aggfunc= ('mean')
)
# переименуем столбцы
users_info_mean.columns = ['duration_mean', 'gb_used_mean', 'message_mean']
users_info_mean  # проверка

<div class="alert alert-info">Минуты разговора, число сообщений и объем потраченного интернет-трафика по тарифу «Ультра» имеет большую дисперсию, отклонение и среднее по сравнению с тарифом «Смарт». Поведение пользователей в рамках тарифа "Ультра" более разнообразно.<div>

### Построим графики

ultra = all_data.query('tariff == "ultra"')

smart = all_data.query('tariff == "smart"')

#Построим гистограмму распределения длительности звонков по обоим тарифам
fig,axes = plt.subplots(1,2,figsize = (15,6))

smart['duration_sum'].hist(bins=60, ax = axes[0])
axes[0].set_title('Распределение длительности звонков пользователей тарифа Смарт')

ultra['duration_sum'].hist(bins=60, ax = axes[1])
axes[1].set_title('Распределение длительности звонков пользователей тарифа Ультра')

#Построим гистограмму распределения отправленных сообщений по обоим тарифам
fig,axes = plt.subplots(1,2,figsize = (15,6))

smart['messages'].hist(bins=50, ax = axes[0])
axes[0].set_title('Распределение отправленных сообщений по тарифу Смарт')

ultra['messages'].hist(bins=50, ax = axes[1])
axes[1].set_title('Распределение отправленных сообщений по тарифу Ультра')

#Построим гистограмму распределения потраченных мегабайт по обоим тарифам
fig,axes = plt.subplots(1,2,figsize = (15,6))

smart['gb_used'].hist(bins=50, ax = axes[0])
axes[0].set_title('Распределение потраченных мегабайт по тарифу Смарт')

ultra['gb_used'].hist(bins=50, ax = axes[1])
axes[1].set_title('Распределение потраченных мегабайт по тарифу Ультра')

<div class="alert alert-info"> Проверим пользователей тарифа "Смарт", которые явно переплачивают по тарифу. Т.к. оплата за тариф "Ультра" составляет 1950 рублей, выберем тех пользователей, которые платят больше данной суммы<div>


#Фильтрую пользователей по заданному критерию выручки
users_over_tariff = smart.query('revenue >= 1950')

#Оцениваю полученные значения
users_over_tariff.sort_values('revenue')

**Итоги анализа поведения пользователей в зависимости от тарифа:**  
Пользователи дешевого тарифа "Смарт" суммарно потребляют услуг примерно в 1,5-2 раза больше, чем те кто пользуется тарифом "УЛЬТРА".  
Пользователи тарифа "УЛЬТРА" суммарно тратят меньше минут разговоров, но говорят дольше.  
Пользователи тарифа "УЛЬТРА" суммарно тратят больше мегабайт.  
Пользователи тарифа "УЛЬТРА", в среднем, в месяц, используют интернет больше чем "СМАРТ" пользователи.  
Пользователи тарифа "УЛЬТРА" и "СМАРТ" одинаково мало пользуются СМС, хотя последние немногим больше за счет массовости.

<div class="alert alert-info"> 471 человек значительно переплачивает по используемому тарифу и выгоднее будет перейти на другой тариф оператора.  
    В целом поведение пользователей тарифа "Ультра" более разнообразно, что вероятно связано с тем,что им не приходится думать об ограничениях на тарифе(что внезапно кончится весь запас интернета, не хватит звонков и тд) <div>


## Проверка гипотез
<a id="check"></a>

По заданию необходимо проверить две гипотезы

1. Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается;
2. Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов;

### Гипотеза 1: "Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается"

Исходя из формулировки гипотезы принимаем нулевую гипотезу H₀ как:
Средняя выручка пользователей тарифов "Ультра" и "Смарт" НЕ различаются

Уровень значимости (пороговое значение) установим как 5% 

revenue_smart = all_data.loc[all_data['tariff']== 'smart', 'revenue']
revenue_smart.head()

revenue_ultra = all_data.loc[all_data['tariff']== 'ultra', 'revenue']
revenue_ultra.head()

#Проверяем гипотезу: "Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается"
alpha = 0.05  # уровень статистической значимости

results = st.ttest_ind(revenue_smart, revenue_ultra, equal_var=False)
print('p-значение:', results.pvalue)

# сравним получившееся p-значение с заданным уровнем статистической значимости
if (results.pvalue < alpha):
    print("Отвергаем нулевую гипотезу")
else:
    print("Не получилось отвергнуть нулевую гипотезу")

**Гипотеза верна - средние выручки двух тарифов различаются.**

### Гипотеза 2: "Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов"

Исходя из формулировки гипотезы принимаем нулевую гипотезу H₀ как:
Cредняя выручка пользователей из Москвы и регионов НЕ различаются

Уровень значимости (пороговое значение) установим как 5% (как общепринятый параметр)

revenue_moscow = all_data.loc[all_data['city'] == 'Москва', 'revenue']
revenue_moscow.head()

revenue_other = all_data.loc[all_data['city']!= 'Москва', 'revenue']
revenue_other.head() 

alpha = 0.05  # уровень статистической значимости

results = st.ttest_ind(revenue_moscow, revenue_other, equal_var=False)
print('p-значение:', results.pvalue)

# сравним получившееся p-значение с заданным уровнем статистической значимости
if (results.pvalue < alpha):
    print("Отвергаем нулевую гипотезу")
else:
    print("Не получилось отвергнуть нулевую гипотезу")

**Нет подтвержения гипотезы 2. Мы не можем уверенно говорить о том что средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов.**

## Общий вывод
<a id="conclusion"></a>

На первом этапе исследования были рассмотрены предоставленные данные.  
Они достаточно корректные с минимальным количетсвом пропусков, что говорит об их достоверности.

На втором этапе исследования данные были обработаны: заменены типы, там где необходимо, округленые значения.
Дополнительно для каждого пользователя были рассчитаны и оформлены в сводные таблицы следующие параметры:

 - количество сделанных звонков и израсходованных минут разговора по месяцам;
 - количество отправленных сообщений по месяцам;
 - объем израсходованного интернет-трафика по месяцам;
 - помесячную выручка 

На третьем этапе исследования были рассчитаны такие показатели как среднее, дисперсия, стандартное отклонение.  Построены гистограммы по распределению длительности звонков, количеству отправленных сообщений и потраченных мегабайт.  
Проанализовано поведение пользовтелей в зависимости от тарифа:
 - Пользователи дешевого тарифа "Смарт" суммарно потребляют услуг примерно в 1,5-2 раза больше, чем те кто пользуется тарифом "УЛЬТРА".
 - Пользователи тарифа "УЛЬТРА" суммарно тратят меньше минут разговоров, но говорят дольше.
 - Пользователи тарифа "УЛЬТРА" суммарно тратят больше мегабайт.
 - Пользователи тарифа "УЛЬТРА", в среднем, в месяц, используют интернет больше чем "СМАРТ" пользователи.
 - Пользователи тарифа "УЛЬТРА" и "СМАРТ" одинаково мало пользуются СМС, хотя последние немногим больше за счет массовости.

На четвертом этапе были выдвинуты и проверены гипотезы о распределении выручки:
 - Средние выручки по двум тарифам различаются
 - Мы не можем уверенно говорить о том что средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов.
